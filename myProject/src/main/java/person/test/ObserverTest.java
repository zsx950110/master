package person.test;import java.util.HashMap;import java.util.Map;/** * 观察者模式 */public class ObserverTest {abstract class Subject{    //维护所有观察者即订阅者    Map<Class,Observer> observerMap = new HashMap<>();    /**     * 注册观察者     */    void registryObserver(Class clz,Observer observer){        observerMap.put(clz,observer);    }    /**     * 删除注册者     * @param clz     */    void  deleteObserver(Class clz){        observerMap.remove(clz);    }    //通知    abstract void  notify(String msg);}class  ConcreteSubject extends Subject{String msg ;//改变并通知    public void publish(String msg) {        this.msg = msg;        notify(this.msg);    }    @Override    void notify(String msg) {        //通知所有的观察者        for (Observer observer:observerMap.values()){            observer.change(msg);        }    }}    /**     * 观察者接口     */    interface Observer{    void change(String msg);    }    /**     * 观察者实现A     */    class  ObserverImplA implements  Observer{        @Override        public void change(String msg) {            System.out.println(this.getClass().getName()+msg);        }    }    /**     * 观察者实现B     */    class  ObserverImplB implements  Observer{        @Override        public void change(String msg) {            System.out.println(this.getClass().getName()+msg);        }    }    public static void main(String[] args) {Observer observerA = new ObserverTest().new ObserverImplA();Observer observerB = new ObserverTest().new ObserverImplB();//注册观察者        ConcreteSubject subject = new ObserverTest().new ConcreteSubject();        subject.registryObserver(ObserverImplA.class,observerA);        subject.registryObserver(ObserverImplB.class,observerB);        //改变值        subject.publish("msg已经发生变化了，特此通知====");    }}