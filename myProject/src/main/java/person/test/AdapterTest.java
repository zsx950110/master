package person.test;import org.springframework.beans.factory.FactoryBean;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import person.pojo.Book;/** * 适配器模式 */public class AdapterTest {    //目标接口interface  target{void request();}//实现类class targetImple implements target{    @Override    public void request() {    }}//适配者即已经存在的老的类    static  class  handle{    void dispach(){        System.out.println("开始转发=====");    }}//如何在targetImpi中调用dispach是个问题，targetImple可以直接继承handle，但没必要，// 适配器就是适用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作static class HandleAdapter implements  target {    handle handle = new handle();    @Override    public void request() {        System.out.println("开始请求=====");        handle.dispach();    }}    public static void main(String[] args) {     HandleAdapter handleAdapter = new HandleAdapter();     handleAdapter.request();    }}