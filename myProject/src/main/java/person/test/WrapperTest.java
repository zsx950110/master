package person.test;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.slf4j.Marker;import java.util.Date;/** * 装饰器模式，模拟打印每行日志前加上当前系统时间 */public class WrapperTest {    //装饰类与目标类要有同一个接口 class WrapperLogger implements Logger {    Logger logger ;    public WrapperLogger(Logger logger){        this.logger = logger;    }        @Override        public String getName() {            return null;        }        @Override        public boolean isTraceEnabled() {            return false;        }        @Override        public void trace(String s) {        }        @Override        public void trace(String s, Object o) {        }        @Override        public void trace(String s, Object o, Object o1) {        }        @Override        public void trace(String s, Object[] objects) {        }        @Override        public void trace(String s, Throwable throwable) {        }        @Override        public boolean isTraceEnabled(Marker marker) {            return false;        }        @Override        public void trace(Marker marker, String s) {        }        @Override        public void trace(Marker marker, String s, Object o) {        }        @Override        public void trace(Marker marker, String s, Object o, Object o1) {        }        @Override        public void trace(Marker marker, String s, Object[] objects) {        }        @Override        public void trace(Marker marker, String s, Throwable throwable) {        }        @Override        public boolean isDebugEnabled() {            return false;        }        @Override        public void debug(String s) {        }        @Override        public void debug(String s, Object o) {        }        @Override        public void debug(String s, Object o, Object o1) {        }        @Override        public void debug(String s, Object[] objects) {        }        @Override        public void debug(String s, Throwable throwable) {        }        @Override        public boolean isDebugEnabled(Marker marker) {            return false;        }        @Override        public void debug(Marker marker, String s) {        }        @Override        public void debug(Marker marker, String s, Object o) {        }        @Override        public void debug(Marker marker, String s, Object o, Object o1) {        }        @Override        public void debug(Marker marker, String s, Object[] objects) {        }        @Override        public void debug(Marker marker, String s, Throwable throwable) {        }        @Override        public boolean isInfoEnabled() {            return false;        }        @Override //进行装饰    public void info(String s) {        s = new StringBuffer().append(new Date().toString()).append("=====").append(s).toString();    logger.info(s);    }        @Override        public void info(String s, Object o) {        }        @Override        public void info(String s, Object o, Object o1) {        }        @Override        public void info(String s, Object[] objects) {        }        @Override        public void info(String s, Throwable throwable) {        }        @Override        public boolean isInfoEnabled(Marker marker) {            return false;        }        @Override        public void info(Marker marker, String s) {        }        @Override        public void info(Marker marker, String s, Object o) {        }        @Override        public void info(Marker marker, String s, Object o, Object o1) {        }        @Override        public void info(Marker marker, String s, Object[] objects) {        }        @Override        public void info(Marker marker, String s, Throwable throwable) {        }        @Override        public boolean isWarnEnabled() {            return false;        }        @Override        public void warn(String s) {        }        @Override        public void warn(String s, Object o) {        }        @Override        public void warn(String s, Object[] objects) {        }        @Override        public void warn(String s, Object o, Object o1) {        }        @Override        public void warn(String s, Throwable throwable) {        }        @Override        public boolean isWarnEnabled(Marker marker) {            return false;        }        @Override        public void warn(Marker marker, String s) {        }        @Override        public void warn(Marker marker, String s, Object o) {        }        @Override        public void warn(Marker marker, String s, Object o, Object o1) {        }        @Override        public void warn(Marker marker, String s, Object[] objects) {        }        @Override        public void warn(Marker marker, String s, Throwable throwable) {        }        @Override        public boolean isErrorEnabled() {            return false;        }        @Override        public void error(String s) {        }        @Override        public void error(String s, Object o) {        }        @Override        public void error(String s, Object o, Object o1) {        }        @Override        public void error(String s, Object[] objects) {        }        @Override        public void error(String s, Throwable throwable) {        }        @Override        public boolean isErrorEnabled(Marker marker) {            return false;        }        @Override        public void error(Marker marker, String s) {        }        @Override        public void error(Marker marker, String s, Object o) {        }        @Override        public void error(Marker marker, String s, Object o, Object o1) {        }        @Override        public void error(Marker marker, String s, Object[] objects) {        }        @Override        public void error(Marker marker, String s, Throwable throwable) {        }    }     class WrapperLoggerFactory {     public     Logger getLogger(Class clz){         return new WrapperLogger(LoggerFactory.getLogger(clz));        }    }//使用    public static void main(String[] args) {    }}