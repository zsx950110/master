package person.test;import person.pojo.Book;import person.pojo.Comment;import person.pojo.Data;import person.pojo.ToDo;import java.io.*;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.*;import java.util.concurrent.*;import java.util.function.Consumer;import java.util.function.Predicate;public class PositiveLockTest {    static  Data data = new Data();    private  static ThreadLocal<Long>  threadLocal = new ThreadLocal<>();    public static void main(String[] args) {        safeCase();    }    //不安全情况的模拟    public   static void unsafeCase(){        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(10,50,20L,TimeUnit.SECONDS,new LinkedBlockingQueue());        for (int i=0;i<100;i++){            threadPoolExecutor.execute(new Thread(){                @Override                public void run() {                    for (int j=0;j<10;j++){                        int st = data.getString();                        data.setString(++st);                    }                }            });        }        try {            TimeUnit.SECONDS.sleep(1);        } catch (InterruptedException e) {            e.printStackTrace();        }        threadPoolExecutor.shutdown();        System.out.println(data.toString());    }    //安全情况    public   static void safeCase(){        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(10,10,20L,TimeUnit.SECONDS,new LinkedBlockingQueue());        for (int i=0;i<10;i++){            threadPoolExecutor.execute(new Thread(){                @Override                public void run() {                    for (int j=0;j<10;j++){                        //写的时候先查下版本号是否一样,如果版本号不一样，则先读再写                        int st = read(data);                            while (!threadLocal.get().equals(data.getVersion())) {                                System.out.println("version is not different");                                st = read(data);                            }                            //直到版本号一致了就写，然后更新成自己的版本号                        synchronized (PositiveLockTest.class) {                            if (threadLocal.get().equals(data.getVersion()))                                write(st);                        }                    }                }            });        }        try {            TimeUnit.SECONDS.sleep(1);        } catch (InterruptedException e) {            e.printStackTrace();        }        threadPoolExecutor.shutdown();        System.out.println("result-----"+data.toString());    }    //读的时候就读到版本号    public static  int read(Data data){        threadLocal.set(data.getVersion());        return  data.getString();    }    public static  void write(Integer integer){        data.setString(++integer);        //要更新版本号        data.setVersion(System.currentTimeMillis());    }}