package person.test;import org.springframework.util.StringUtils;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.ConcurrentMap;import java.util.concurrent.atomic.AtomicInteger;public class JavaTest {    private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");    private static SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm:ss");    private static AtomicInteger atomicToDo = new AtomicInteger(0);    //初始化应用启动时间，用于第一次比较    private  static Date oldDate;    static {        try {            oldDate = sdf.parse(sdf.format(new Date()));        } catch (ParseException e) {            e.printStackTrace();        }    }    public static void main(String[] args) throws ParseException {        Date date = new Date ();        DateFormat df = new SimpleDateFormat("yyyy-mm-dd");        DateFormat df1 = new SimpleDateFormat("yyyy/mm/dd");        Date date1  = df.parse("2019-12-26");        Date date2  = df1.parse("2019/12/26");        System.out.println(date1.equals(date2));        "2019-12-26".replace('-','/');      /*  String strs="a,b,c,d,e,f";        String[] strings = StringUtils.tokenizeToStringArray(strs, ",");        for (String string : strings) {            System.out.println(string);        }        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.SECOND,0);        System.out.println(calendar.getTime());*/    }    public static void  bitOperationTest(){        int i = (-6)|(-2); //按照位的运算规则，十进制 ,0011>>>1100>>11111        System.out.println(i);        int i1 =(-2)^(-6);//异或规则：相同为0，不同为1        System.out.println(i1);        //左移运算        int q =5<<3;        System.out.println(Integer.toBinaryString(q));//101000        //右移运算        int p = 5>>2;    //    ConcurrentHashMap        int f=~5;        System.out.println(Integer.toBinaryString(f));        int a = 1;//0001        int b = 2;//0010        //两个数交换原理            a=a^b;//0011 //a和b异或的结果            b=a^b;//0001 //结果又跟b进行异或，将结果中跟b相同的位数全变为0，剩下的就是a            a=a^b;//0010 //将结果跟a异或，剩下的就是b    }    private static AtomicInteger atomicDayCommand = new AtomicInteger(0);    /**     * 获得顺序号     * @param subtopic     * @return     */    private static String getSeq(String subtopic){        StringBuffer sb = new StringBuffer();        Date date = new Date();        String sdfStr = sdf.format(date);        String[] strings = sdfStr.split("-");        //如果是下一天，则将值归为0        if(isNextDay(sdfStr)){            atomicToDo.set(0);            atomicDayCommand.set(0);        };        String[] hm = sdfTime.format(date).split(":");        sb.append("011500");        //年月日时分        sb.append(strings[0]);        sb.append(strings[1]);        sb.append(strings[2]);        sb.append(hm[0]);        sb.append(hm[1]);        //主题最后一位        sb.append(subtopic);        if("8".equals(subtopic)){            int todo = atomicToDo.incrementAndGet();           sb.append(  String.format("%03d",todo));        }else if("6".equals(subtopic)){            int cond = atomicDayCommand.incrementAndGet();            sb.append(  String.format("%0$3d",cond));        }        //每次记录上一次的时间        try {            oldDate =sdf.parse(sdfStr);        } catch (ParseException e) {            e.printStackTrace();        }        return sb.toString();    }    private static boolean isNextDay(String dateStr){        try {            Date now = sdf.parse(dateStr);            if(now.after(oldDate)){                return true;            }        } catch (ParseException e) {            e.printStackTrace();        }        return false;    }}