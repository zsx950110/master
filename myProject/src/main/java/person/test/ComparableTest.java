package person.test;import com.sun.xml.bind.v2.TODO;import java.util.*;/*** @Author: Zhang Shaoxuan* @Description:  集合元素比较的测试类* @DateTime: 2020/6/6 11:45* @Params:* @Return*/public  class ComparableTest {    public static void main(String[] args) {        testSet();    }    /**     *  自然元素list集合的测试     */    public static  void naturalElement(){        List<String> names = new ArrayList<>();        names.add("flis");        names.add("blis");        names.add("clis");        names.add("dlis");        names.add("alis");        names.add("elis");        System.out.println("未排序-----------");        for (String name : names) {            System.out.println(name);        }        System.out.println("排序后-----------");        //只能对list集合进行排序，不能用于set        Collections.sort(names);        for (String name : names) {            System.out.println(name);        }        Collections.reverse(names);    }    /**     * 自定义类比较测试     */    public  static  void testCustom(){        List<ToDo> list = new ArrayList<>();        Random r = new Random();        char [] chars = new char[]{'a','b','c','d','i','f','i','h','i','j','k'};        for (int i=0;i<10;i++){           int index =  r.nextInt(10)+i;           int index1 =  r.nextInt(10);            list.add(new ToDo(chars[i] +Character.toString(chars[index1]),index));        }        /**         * 两种实现比较的方式         */      //  Collections.sort(list);        Collections.sort(list, new Comparator<ToDo>() {            @Override            public int compare(ToDo o1, ToDo o2) {                //获得两个元素的长度并取小                int l1 = o1.getName().length();                int l2 = o2.getName().length();                //获得两个元素的最小值                int limit =  Math.min(l1,l2);                for (int i=0;i<limit;i++){                    char c1 = o1.getName().charAt(i);                    char c2 = o2.getName().charAt(i);                    if(c1!=c2){                        c1 = Character.toUpperCase(c1);                        c2 = Character.toUpperCase(c2);                        if(c1!=c2){                            return c1 - c2;                        }                    }                }                return l1- l2 ;            }        });        for (ToDo toDo : list) {            System.out.println(toDo.toString());        }    }    /**     * set集合排序测试     */    public static  void testSet(){ //set的排序框架treeset，使用上也要用到比较器，comparable和compatator        //String和Integer直接排序        TreeSet<String> set = new TreeSet<>();        set.add("abf");        set.add("baf");        set.add("adc");        set.add("vbf");        set.add("bbef");        set = (TreeSet) set.descendingSet();        for (String s : set) {            System.out.println(s);        }        Random r = new Random();        char [] chars = new char[]{'a','b','c','d','i','f','i','h','i','j','k'};        Set<ToDo> toDoSet = new TreeSet<>(new Comparator<ToDo>() {            @Override            public int compare(ToDo o1, ToDo o2) {                return o1.id - o2.id;            }        });        for (int i=0;i<10;i++){            int index =  r.nextInt(10)+i;            int index1 =  r.nextInt(10);            toDoSet.add(new ToDo(chars[i] +Character.toString(chars[index1]),index));        }        for (ToDo toDo : toDoSet) {            System.out.println(toDo.toString());        }    }    static  class  ToDo  implements  Comparable<ToDo>{       private String name ;       private Integer id ;        public ToDo(String name, Integer id) {            this.name = name;            this.id = id;        }        @Override        public String toString() {            return "ToDo{" +                    "name='" + name + '\'' +                    ", id='" + id + '\'' +                    '}';        }        public String getName() {            return name;        }        public void setName(String name) {            this.name = name;        }        public Integer getId() {            return id;        }        public void setId(Integer id) {            this.id = id;        }        /**         *         通过id去排序，正常用当前对象的值-传入的值做比较         *         ，是按照从小到大的排序，反过来从大到小         */        @Override        public int compareTo(ToDo o) {            return  o.id - this.id ;        }    }}