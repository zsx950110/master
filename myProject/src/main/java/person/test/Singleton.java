package person.test;import org.springframework.util.StringUtils;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.concurrent.atomic.AtomicInteger;public class Singleton {    //线程安全    //私有属性    private static  volatile  Singleton instance ;    //私有构造器    private Singleton(){    }    //公有静态方法    public static Singleton getInstance(){        if (instance==null){ //第一次判空是检查是否为空            synchronized (Singleton.class){               // if (instance==null){//第二次如果这里不判断的话，第二个线程结束阻塞后，会直接new一个实例，判断的话则能使得后面用到的都是第一个线程new的实例，当然属性要加volatile                    instance = new Singleton();               // }            }        }        return instance;    }    public static void main(String[] args) {        for (int i=0;i<100;i++){            Thread thread = new Thread(){                @Override                public void run() {                    System.out.println(Singleton.getInstance());                }            };            thread.start();         }    }}