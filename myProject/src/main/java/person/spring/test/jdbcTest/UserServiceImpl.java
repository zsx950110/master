package person.spring.test.jdbcTest;import net.sf.cglib.proxy.Enhancer;import net.sf.cglib.proxy.MethodInterceptor;import net.sf.cglib.proxy.MethodProxy;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.Assert;import person.pojo.TestUser;import javax.sql.DataSource;import java.io.IOException;import java.lang.reflect.Method;import java.sql.SQLException;import java.util.List;public class UserServiceImpl{private JdbcTemplate jdbcTemplate;@Autowiredprivate UserServiceImpl2 userServiceImpl2;    public void setJdbcTemplate(DataSource dataSource) {        this.jdbcTemplate = new JdbcTemplate(dataSource);    }    Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);    public JdbcTemplate getJdbcTemplate() {        return jdbcTemplate;    } @Transactional(rollbackFor = Exception.class)    public void save(TestUser user) {  // jdbcTemplate.update("insert into t_mytest (fid, fname, fpwd) values (?, ?, ?)",  //          new Object[]{user.getId(),user.getName(),null});    try {       save1( user);    } catch (Exception e) {        e.printStackTrace();    }   //  throw new RuntimeException(); }    @Transactional(propagation = Propagation.REQUIRED)    public void save1(TestUser user)  {   //     jdbcTemplate.update("insert into t_mytest (fid, fname, fpwd) values (?, ?, ?)",    //            new Object[]{user.getId(),user.getName(),null});            throw new RuntimeException();    }    public List<TestUser> listUsers() {      //  jdbcTemplate.query("select * from t_mytest",new Object());        return null;    }}