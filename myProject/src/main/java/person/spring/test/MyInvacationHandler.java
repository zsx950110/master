package person.spring.test;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;/** * jdk动态代理模拟 */public class MyInvacationHandler implements InvocationHandler {private Object target;    public MyInvacationHandler(Object target) {        this.target = target;    }    public  void before(){        System.out.println("==========before11111============");    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        before();Object object = method.invoke(target,args);        after();        return  object;    }    public void after(){        System.out.println("==========after1111============");    }    //返回代理对象    public  Object getProxy(Object target){        return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),target.getClass().getInterfaces(),this);    }}